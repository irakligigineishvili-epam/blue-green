#  Application Configuration
conf:
  appName: blue
  tier: frontend
  environment: development
  version: "0.0.1"

#  Deployment Settings
replicaCount: 2

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

image:
  repository: nginx
  tag: "1.29"
  pullPolicy: IfNotPresent

imagePullSecrets: []

serviceAccount:
  create: true
  name: "blue"
  automount: false
  annotations: {}

# Security Contexts
podSecurityContext: {}

securityContext: {}

# Probes
livenessProbe:
  httpGet:
    port: 80
  initialDelaySeconds: 5
  periodSeconds: 10

readinessProbe:
  httpGet:
    port: 80
  initialDelaySeconds: 5
  periodSeconds: 10

# Resources
resources:
  requests:
    memory: "64Mi"
    cpu: "25m"
  limits:
    memory: "128Mi"
    cpu: "50m"

# Service
service:
  type: ClusterIP
  port: 80

# Ingress
ingress:
  enabled: true
  className: nginx
  hosts:
    - host: ""
      paths:
        - path: /blue
          pathType: Prefix

# Scheduling: Affinity, Tolerations, Topology
nodeSelector: {}

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - minikube-m02

tolerations: []

topologySpreadConstraints:
  - maxSkew: 1
    minDomains: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: blue
        app.kubernetes.io/version: 0.0.1

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    enabled: false
    scaleUp:
      stabilizationWindowSeconds: 30
      selectPolicy: Max
      percentValue: 100
      podValue: 1
      periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 180
      selectPolicy: Max
      percentValue: 50
      podValue: 1
      periodSeconds: 15

# Volumes
volumeMounts:
  - name: config-volume
    mountPath: /etc/nginx/conf.d

volumes:
  - name: config-volume
    configMap:
      name: blue-config
      items:
        - key: nginx.conf
          path: nginx.conf

# ConfigMap
configmap:
  create: true
  data:
    nginx.conf: |
      server {
        listen 80;
        server_name localhost;
        location / {
          return 200 "Blue!\n";
        }
      }
  binaryData: {}
